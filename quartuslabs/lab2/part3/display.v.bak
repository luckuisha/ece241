module display(input [0:3]SW, output [0:6]HEX);

	assign HEX[0] = (SW[0] | SW[1] | SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | SW[2] | SW[3]) & (~SW[0] | SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | ~SW[1] | SW[2] | ~SW[3]);
	assign HEX[1] = (SW[0] | ~SW[1] | SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | ~SW[2] | SW[3]) & (~SW[0] | SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | ~SW[1] | SW[2] | SW[3]) & (~SW[0] | ~SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | ~SW[1] | ~SW[2] | SW[3]);
	assign HEX[2] = (SW[0] | SW[1] | ~SW[2] | SW[3]) & (~SW[0] | ~SW[1] | SW[2] | SW[3]) & (~SW[0] | ~SW[1] | ~SW[2] | SW[3]) & (~SW[0] | ~SW[1] | ~SW[2] | ~SW[3]);
	assign HEX[3] = (SW[0] | SW[1] | SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | SW[2] | SW[3]) & (SW[0] | ~SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | SW[1] | ~SW[2] | SW[3]) & (~SW[0] | ~SW[1] | ~SW[2] | ~SW[3]);
	assign HEX[4] = (SW[0] | SW[1] | SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | ~SW[2] | ~SW[3]) & (SW[0] | SW[1] | ~SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | SW[2] | SW[3]) & (SW[0] | ~SW[1] | SW[2] | ~SW[3]) & (~SW[0] | SW[1] | SW[2] | ~SW[3]);
	assign HEX[5] = (SW[0] | SW[1] | SW[2] | ~SW[3]) & (SW[0] | SW[1] | ~SW[2] | ~SW[3]) & (SW[0] | SW[1] | ~SW[2] | SW[3]) & (SW[0] | ~SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | ~SW[1] | SW[2] | ~SW[3]);
	assign HEX[6] = (SW[0] | SW[1] | SW[2] | SW[3]) & (SW[0] | SW[1] | SW[2] | ~SW[3]) & (SW[0] | ~SW[1] | ~SW[2] | ~SW[3]) & (~SW[0] | ~SW[1] | SW[2] | SW[3]);

endmodule