module counter(input [9:0]SW, input [3:0]KEY, output [6:0]HEX0, output [6:0]HEX1);
	wire [3:0]w;
	wire [3:0]w1;
	wire [6:0]nd;
	tff u0 (SW[1], SW[0], HEX[0], SW[1], w[3]);
	assign nd[0] = w[3] & SW[1];
	tff u1 (nd[0], SW[0], HEX[0], SW[1], w[2]);
	assign nd[1] = w[2] & nd[0];
	tff u2 (nd[1], SW[0], HEX[0], SW[1], w[1]);
	assign nd[2] = w[1] & nd[1];
	tff u3 (nd[2], SW[0], HEX[0], SW[1], w[0]);
	assign nd[3] = w[0] & nd[2];
	tff u4 (nd[3], SW[0], HEX[0], SW[1], w1[3]);
	assign nd[4] = w1[3] & nd[3];
	tff u5 (nd[4], SW[0], HEX[0], SW[1], w1[2]);
	assign nd[5] = w1[2] & nd[4];
	tff u6 (nd[5], SW[0], HEX[0], SW[1], w1[1]);
	assign nd[6] = w1[1] & nd[5];
	tff u7 (nd[6], SW[0], HEX[0], SW[1], w1[0]);
	display u8 (w, HEX0);
	display u9 (w1, HEX1);
endmodule

module tff(input t, clear, ~clock, enable, output reg q);
	wire w;
	assign w = t ^ q;
	always @ (posedge clock)
		begin
			if (!reset)
				q<=0;
			else if (enable)
				q<=w;
		end
endmodule

module display(input [3:0]SW, output [6:0]HEX);
	 assign HEX[0]= (~SW[3]&~SW[2]&~SW[1]&SW[0])+(~SW[3]&SW[2]&~SW[1]&~SW[0])+(SW[3]&~SW[2]&SW[1]&SW[0])+(SW[3]&SW[2]&~SW[1]&SW[0]);
	 assign HEX[1]=(~SW[3]&SW[2]&~SW[1]&SW[0])+(~SW[3]&SW[2]&SW[1]&~SW[0])+(SW[3]&~SW[2]&SW[1]&SW[0])+(SW[3]&SW[2]&~SW[1]&~SW[0])+(SW[3]&SW[2]&SW[1]&~SW[0])+(SW[3]&SW[2]&SW[1]&SW[0]);
	 assign HEX[2]=(~SW[3]&~SW[2]&SW[1]&~SW[0])+(SW[3]&SW[2]&~SW[1]&~SW[0])+(SW[3]&SW[2]&SW[1]&~SW[0])+(SW[3]&SW[2]&SW[1]&SW[0]);
	 assign HEX[3]=(~SW[3]&~SW[2]&~SW[1]&SW[0])+(~SW[3]&SW[2]&~SW[1]&~SW[0])+(~SW[3]&SW[2]&SW[1]&SW[0])+(SW[3]&~SW[2]&SW[1]&~SW[0])+(SW[3]&SW[2]&SW[1]&SW[0]);
	 assign HEX[4]=(~SW[3]&~SW[2]&~SW[1]&SW[0])+(~SW[3]&~SW[2]&SW[1]&SW[0])+(~SW[3]&SW[2]&~SW[1]&~SW[0])+(~SW[3]&SW[2]&~SW[1]&SW[0])+(~SW[3]&SW[2]&SW[1]&SW[0])+(SW[3]&~SW[2]&~SW[1]&SW[0]);
	 assign HEX[5]=(~SW[3]&~SW[2]&~SW[1]&SW[0])+(~SW[3]&~SW[2]&SW[1]&~SW[0])+(~SW[3]&~SW[2]&SW[1]&SW[0])+(~SW[3]&SW[2]&SW[1]&SW[0])+(SW[3]&SW[2]&~SW[1]&SW[0]);
	 assign HEX[6]=(~SW[3]&~SW[2]&~SW[1]&SW[0])+(~SW[3]&SW[2]&SW[1]&SW[0])+(SW[3]&SW[2]&~SW[1]&~SW[0])+(~SW[3]&~SW[2]&~SW[1]&~SW[0]);
endmodule